name: Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '@docs/**'
      - 'docs/**'
      - '**.md'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '@docs/**'
      - 'docs/**'
      - '**.md'
      - '.github/workflows/ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: false
    - name: Test product-service
      continue-on-error: true
      id: test-product
      run: |
        cd backend/product-service
        cp .env.example .env
        go mod download
        go test ./...
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: root
        POSTGRES_DB: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    - name: Test user-service
      continue-on-error: true
      id: test-user
      run: |
        cd backend/user-service
        cp .env.example .env
        go mod download
        go test ./...
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: root
        POSTGRES_DB: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    - name: Test inventory-service
      continue-on-error: true
      id: test-inventory
      run: |
        cd backend/inventory-service
        cp .env.example .env || touch .env
        go mod download
        go test ./...
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: root
        POSTGRES_DB: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    - name: Test api-gateway
      continue-on-error: true
      id: test-api-gateway
      run: |
        cd backend/api-gateway
        cp .env.example .env
        go mod download
        go test ./...
      env:
        PRODUCT_SERVICE_ADDR: localhost:50051
        USER_SERVICE_ADDR: localhost:50052
        INVENTORY_SERVICE_ADDR: localhost:50055
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.53.3
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run linter on product-service
      continue-on-error: true
      id: lint-product
      run: |
        cd backend/product-service
        golangci-lint run --out-format=github-actions --timeout=5m --skip-dirs=tests --disable=typecheck

    - name: Run linter on user-service
      continue-on-error: true
      id: lint-user
      run: |
        cd backend/user-service
        golangci-lint run --out-format=github-actions --timeout=5m --skip-dirs=tests --disable=typecheck

    - name: Run linter on api-gateway
      continue-on-error: true
      id: lint-api-gateway
      run: |
        cd backend/api-gateway
        golangci-lint run --out-format=github-actions --timeout=5m --skip-dirs=tests --disable=typecheck

    - name: Run linter on inventory-service
      continue-on-error: true
      id: lint-inventory
      run: |
        cd backend/inventory-service
        golangci-lint run --out-format=github-actions --timeout=5m --skip-dirs=tests --disable=typecheck

    - name: Test Summary
      run: |
        echo "### Test Results Summary 📊" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Tests | Linting |" >> $GITHUB_STEP_SUMMARY
        echo "| ------- | ----- | ------- |" >> $GITHUB_STEP_SUMMARY

        # Product Service
        if [[ "${{ steps.test-product.outcome }}" == "success" ]]; then
          TEST_PRODUCT="✅ Passed"
          PRODUCT_TEST_PASSED=1
        else
          TEST_PRODUCT="❌ Failed"
          PRODUCT_TEST_PASSED=0
        fi

        if [[ "${{ steps.lint-product.outcome }}" == "success" ]]; then
          LINT_PRODUCT="✅ Passed"
          PRODUCT_LINT_PASSED=1
        else
          LINT_PRODUCT="❌ Failed"
          PRODUCT_LINT_PASSED=0
        fi

        echo "| Product Service | $TEST_PRODUCT | $LINT_PRODUCT |" >> $GITHUB_STEP_SUMMARY

        # User Service
        if [[ "${{ steps.test-user.outcome }}" == "success" ]]; then
          TEST_USER="✅ Passed"
          USER_TEST_PASSED=1
        else
          TEST_USER="❌ Failed"
          USER_TEST_PASSED=0
        fi

        if [[ "${{ steps.lint-user.outcome }}" == "success" ]]; then
          LINT_USER="✅ Passed"
          USER_LINT_PASSED=1
        else
          LINT_USER="❌ Failed"
          USER_LINT_PASSED=0
        fi

        echo "| User Service | $TEST_USER | $LINT_USER |" >> $GITHUB_STEP_SUMMARY

        # Inventory Service
        if [[ "${{ steps.test-inventory.outcome }}" == "success" ]]; then
          TEST_INVENTORY="✅ Passed"
          INVENTORY_TEST_PASSED=1
        else
          TEST_INVENTORY="❌ Failed"
          INVENTORY_TEST_PASSED=0
        fi

        if [[ "${{ steps.lint-inventory.outcome }}" == "success" ]]; then
          LINT_INVENTORY="✅ Passed"
          INVENTORY_LINT_PASSED=1
        else
          LINT_INVENTORY="❌ Failed"
          INVENTORY_LINT_PASSED=0
        fi

        echo "| Inventory Service | $TEST_INVENTORY | $LINT_INVENTORY |" >> $GITHUB_STEP_SUMMARY

        # API Gateway
        if [[ "${{ steps.test-api-gateway.outcome }}" == "success" ]]; then
          TEST_API="✅ Passed"
          API_TEST_PASSED=1
        else
          TEST_API="❌ Failed"
          API_TEST_PASSED=0
        fi

        if [[ "${{ steps.lint-api-gateway.outcome }}" == "success" ]]; then
          LINT_API="✅ Passed"
          API_LINT_PASSED=1
        else
          LINT_API="❌ Failed"
          API_LINT_PASSED=0
        fi

        echo "| API Gateway | $TEST_API | $LINT_API |" >> $GITHUB_STEP_SUMMARY

        # Calculate total passed tests and linting operations
        TOTAL_PASSED=$((PRODUCT_TEST_PASSED + PRODUCT_LINT_PASSED + USER_TEST_PASSED + USER_LINT_PASSED + INVENTORY_TEST_PASSED + INVENTORY_LINT_PASSED + API_TEST_PASSED + API_LINT_PASSED))

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Total passed checks: $TOTAL_PASSED out of 8" >> $GITHUB_STEP_SUMMARY

        # Exit with error if all tests and linting operations failed
        if [[ $TOTAL_PASSED -eq 0 ]]; then
          echo "::error::All tests and linting operations failed!"
          exit 1
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Setup environment files
      run: |
        cp backend/product-service/.env.example backend/product-service/.env
        cp backend/user-service/.env.example backend/user-service/.env
        cp backend/api-gateway/.env.example backend/api-gateway/.env
        cp backend/inventory-service/.env.example backend/inventory-service/.env 2>/dev/null || touch backend/inventory-service/.env
        # Make sure init-db.sh is executable
        chmod +x init-db.sh
    - name: Build Backend Docker images
      run: |
        # Make sure we're in the right directory
        ls -la
        # Check Docker and Docker Compose versions
        docker --version
        docker compose version
        # Build the images
        docker compose build api-gateway
        docker compose build product-service
        docker compose build user-service
        docker compose build inventory-service
