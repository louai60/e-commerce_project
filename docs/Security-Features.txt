ðŸ”’ Implement comprehensive security features

Security implementations:

Authentication & Authorization:
- JWT-based authentication with access and refresh tokens
- Role-based access control (RBAC) with granular permissions
- Admin key middleware for protected routes
- Two-factor authentication support
- Email and phone verification flags

Password Security:
- Password hashing using secure algorithms
- Random ID generation for user accounts
- Secure password requirements enforcement

Session Management:
- Secure cookie configuration with HttpOnly, Secure, and SameSite flags
- Token rotation with 24h access / 7d refresh token duration
- Rate limiting (5 attempts per minute)

Database Security:
- Parameterized queries to prevent SQL injection
- Cascading deletes for referential integrity
- Indexed lookups for performance
- Type safety with ENUM constraints

Environment & Configuration:
- Separate development/production configs
- Environment variable protection
- Sensitive files excluded via .gitignore

API Security:
- HTTPS/TLS support
- Cross-Origin Resource Sharing (CORS) configuration
- Request validation middleware
- Admin-only routes protection

Files affected:
- backend/user-service/migrations/000001_create_users_table.up.sql
- backend/user-service/service/admin_key_manager.go
- backend/user-service/service/token_manager.go
- backend/api-gateway/middleware/admin.go
- backend/api-gateway/middleware/admin_key.go
- Various .env and config files